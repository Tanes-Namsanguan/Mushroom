<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Line Chart with Summary</title>
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
  <style>
    body { font-family: Inter, sans-serif; background: #f8fafc; color: #0f172a; margin: 0; padding: 20px; }
    h1 { margin-bottom: 20px; }
    .summary { display: flex; gap: 20px; margin-bottom: 20px; }
    .card { background: white; padding: 12px 16px; border-radius: 8px; box-shadow: 0 1px 4px rgba(0,0,0,0.1); }
    canvas { background: white; border-radius: 8px; box-shadow: 0 1px 4px rgba(0,0,0,0.1); padding: 10px; }
  </style>
</head>
<body>
  <h1>Line Chart with Summary</h1>
  <div class="summary">
    <div class="card">Average: <span id="avg">-</span></div>
    <div class="card">Count: <span id="count">-</span></div>
    <div class="card">Total: <span id="total">-</span></div>
  </div>
  <canvas id="chart" height="100"></canvas>

  <script>
    const UPL = 20; // Upper Process Limit
    const LPL = 10; // Lower Process Limit

    async function fetchData() {
      const res = await fetch('/api/data');
      const data = await res.json();
      return data;
    }

    function updateSummary(data) {
      const values = data.map(d => d.value);
      const avg = values.reduce((a,b) => a + b, 0) / (values.length || 1);
      const total = values.reduce((a,b) => a + b, 0);
      document.getElementById('avg').textContent = avg.toFixed(2);
      document.getElementById('count').textContent = values.length;
      document.getElementById('total').textContent = total.toFixed(2);
    }

    async function renderChart() {
      const data = await fetchData();
      updateSummary(data);

      const points = data.map(d => ({ x: new Date(d.ts), y: d.value }));

      const ctx = document.getElementById('chart').getContext('2d');
      if (window.chartInstance) {
        window.chartInstance.destroy();
      }
      await import('https://cdn.jsdelivr.net/npm/luxon@3/build/global/luxon.min.js');
      await import('https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.3.1/dist/chartjs-adapter-luxon.umd.min.js');

      window.chartInstance = new Chart(ctx, {
        type: 'line',
        data: {
          datasets: [
            {
              label: 'Value',
              data: points,
              parsing: false,
              borderColor: '#0ea5e9',
              borderWidth: 2,
              tension: 0.2
            },
            {
              label: 'UPL',
              data: points.map(p => ({ x: p.x, y: UPL })),
              parsing: false,
              borderColor: 'red',
              borderWidth: 1,
              borderDash: [5,5],
              pointRadius: 0
            },
            {
              label: 'LPL',
              data: points.map(p => ({ x: p.x, y: LPL })),
              parsing: false,
              borderColor: 'orange',
              borderWidth: 1,
              borderDash: [5,5],
              pointRadius: 0
            }
          ]
        },
        options: {
          responsive: true,
          scales: {
            x: { type: 'time', time: { unit: 'minute' } },
            y: { beginAtZero: true }
          },
          plugins: {
            legend: { display: true }
          }
        }
      });
    }

    // โหลดครั้งแรก + อัปเดตทุก 5 วินาที
    renderChart();
    setInterval(renderChart, 5000);
  </script>
</body>
</html>
